// frontend/src/pages/CreateLinkPage.js - FIXED VERSION
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Card, 
  Form, 
  Input, 
  Button, 
  Typography, 
  Alert,
  Divider,
  message
} from 'antd';
import { 
  LinkOutlined, 
  ThunderboltOutlined,
  CopyOutlined 
} from '@ant-design/icons';

// ‚úÖ CRITICAL: S·ª≠ d·ª•ng apiClient th·ªëng nh·∫•t thay v√¨ t·∫°o instance m·ªõi
import apiClient from '../utils/apiClient';
import useAuthStore from '../stores/authStore';

const { Title, Text } = Typography;
const { TextArea } = Input;

const CreateLinkPage = () => {
  // ‚úÖ FIXED: L·∫•y token t·ª´ store v·ªõi t√™n th·ªëng nh·∫•t
  const { token, isAuthenticated, user } = useAuthStore();
  const navigate = useNavigate();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [previewData, setPreviewData] = useState(null);

  // ‚úÖ Check auth on component mount
  React.useEffect(() => {
    if (!isAuthenticated || !token) {
      message.error('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc!');
      navigate('/login');
    }
  }, [isAuthenticated, token, navigate]);

  const handleSubmit = async (values) => {
    setLoading(true);
    
    try {
      // ‚úÖ Double check auth
      if (!isAuthenticated || !token) {
        message.error('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc!');
        navigate('/login');
        return;
      }

      console.log('üîó Creating link for user:', user?.email);
      console.log('üîë Using token:', token?.substring(0, 10) + '...');

      // ‚úÖ FIXED: S·ª≠ d·ª•ng apiClient th·ªëng nh·∫•t (ƒë√£ c√≥ Authorization header)
      const response = await apiClient.post('/api/links', {
        originalUrl: values.originalUrl,
        shortCode: values.customShortCode || undefined,
        title: values.title || undefined,
        campaign: values.campaign || undefined,
        description: values.description || undefined
      });

      const data = response.data?.data;
      
      if (!data?.shortCode || !data?.shortUrl) {
        throw new Error('ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá');
      }
      
      const { shortCode, shortUrl } = data;
      
      message.success('Li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
      
      // Store created link data for display
      setPreviewData({
        shortCode,
        shortUrl,
        originalUrl: values.originalUrl,
        title: values.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'
      });
      
      // Reset form
      form.resetFields();
      
    } catch (error) {
      console.error('‚ùå Create link error:', error);
      
      // Handle specific errors
      if (error.response?.status === 401) {
        message.error('Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!');
        navigate('/login');
      } else if (error.response?.status === 400) {
        const errorMessage = error.response?.data?.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá';
        message.error(errorMessage);
      } else if (error.response?.status === 409) {
        message.error('M√£ ng·∫Øn n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn m√£ kh√°c!');
      } else {
        message.error(error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o li√™n k·∫øt');
      }
      
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text).then(() => {
      message.success('ƒê√£ sao ch√©p v√†o clipboard!');
    }).catch(() => {
      message.error('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng copy th·ªß c√¥ng.');
    });
  };

  // ‚úÖ Show loading if checking auth
  if (!isAuthenticated) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <Title level={4}>ƒêang ki·ªÉm tra ƒëƒÉng nh·∫≠p...</Title>
      </div>
    );
  }

  return (
    <div style={{ maxWidth: 800, margin: '0 auto', padding: '20px' }}>
      <Card>
        <Title level={2}>
          <LinkOutlined /> T·∫°o li√™n k·∫øt ng·∫Øn
        </Title>
        <Text type="secondary">
          T·∫°o li√™n k·∫øt ng·∫Øn cho URL d√†i c·ªßa b·∫°n v·ªõi c√°c t√πy ch·ªçn t√πy ch·ªânh
        </Text>

        <Divider />

        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          disabled={loading}
        >
          <Form.Item
            label="URL g·ªëc"
            name="originalUrl"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p URL!' },
              { type: 'url', message: 'URL kh√¥ng h·ª£p l·ªá!' }
            ]}
          >
            <Input
              placeholder="https://example.com/very-long-url"
              size="large"
              prefix={<LinkOutlined />}
            />
          </Form.Item>

          <Form.Item
            label="M√£ ng·∫Øn t√πy ch·ªânh (t√πy ch·ªçn)"
            name="customShortCode"
            rules={[
              { pattern: /^[a-zA-Z0-9-_]+$/, message: 'Ch·ªâ cho ph√©p ch·ªØ c√°i, s·ªë, d·∫•u g·∫°ch ngang v√† g·∫°ch d∆∞·ªõi' }
            ]}
          >
            <Input
              placeholder="my-custom-code"
              size="large"
              prefix={<ThunderboltOutlined />}
            />
          </Form.Item>

          <Form.Item
            label="Ti√™u ƒë·ªÅ (t√πy ch·ªçn)"
            name="title"
          >
            <Input
              placeholder="Ti√™u ƒë·ªÅ m√¥ t·∫£ cho li√™n k·∫øt"
              size="large"
            />
          </Form.Item>

          <Form.Item
            label="Campaign (t√πy ch·ªçn)"
            name="campaign"
          >
            <Input
              placeholder="utm_campaign_name"
              size="large"
            />
          </Form.Item>

          <Form.Item
            label="M√¥ t·∫£ (t√πy ch·ªçn)"
            name="description"
          >
            <TextArea
              rows={3}
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ li√™n k·∫øt n√†y"
            />
          </Form.Item>

          <Form.Item>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              size="large"
              block
              icon={<ThunderboltOutlined />}
            >
              {loading ? 'ƒêang t·∫°o...' : 'T·∫°o li√™n k·∫øt ng·∫Øn'}
            </Button>
          </Form.Item>
        </Form>

        {/* ‚úÖ Success preview */}
        {previewData && (
          <>
            <Divider />
            <Alert
              message="Li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
              description={
                <div style={{ marginTop: 10 }}>
                  <div><strong>URL g·ªëc:</strong> {previewData.originalUrl}</div>
                  <div><strong>URL ng·∫Øn:</strong> 
                    <Button
                      type="link"
                      icon={<CopyOutlined />}
                      onClick={() => copyToClipboard(previewData.shortUrl)}
                    >
                      {previewData.shortUrl}
                    </Button>
                  </div>
                  <div><strong>M√£:</strong> {previewData.shortCode}</div>
                  <div><strong>Ti√™u ƒë·ªÅ:</strong> {previewData.title}</div>
                </div>
              }
              type="success"
              showIcon
            />
          </>
        )}
      </Card>
    </div>
  );
};

export default CreateLinkPage;