// backend/test-workers.js - Thay th·∫ø to√†n b·ªô n·ªôi dung
const bullMQService = require('./core/queue/BullMQService');

async function testWorkers() {
  console.log('üß™ Testing BullMQ Workers...\n');

  try {
    // Kh·ªüi t·∫°o BullMQ service (bao g·ªìm c·∫£ workers)
    await bullMQService.initialize();
    console.log('‚úÖ BullMQ v√† Workers kh·ªüi t·∫°o th√†nh c√¥ng!\n');

    // Test 1: Th√™m v√† x·ª≠ l√Ω metadata job
    console.log('üìã Test 1: Metadata Job...');
    await bullMQService.addMetadataJob(
      'link-789',
      'https://github.com',
      'user-123'
    );

    // Test 2: Th√™m v√† x·ª≠ l√Ω email job
    console.log('\nüìß Test 2: Email Job...');
    await bullMQService.addEmailJob(
      'welcome',
      'user@example.com',
      { userName: 'John Doe' }
    );

    // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ workers x·ª≠ l√Ω
    console.log('\n‚è≥ Ch·ªù workers x·ª≠ l√Ω jobs...');
    await new Promise(resolve => setTimeout(resolve, 4000)); // Ch·ªù 4 gi√¢y

    // Ki·ªÉm tra tr·∫°ng th√°i queue
    console.log('\nüìä Ki·ªÉm tra k·∫øt qu·∫£:');
    
    const metadataCompleted = await bullMQService.queues.metadata.getCompleted();
    const emailCompleted = await bullMQService.queues.email.getCompleted();
    const metadataWaiting = await bullMQService.queues.metadata.getWaiting();
    const emailWaiting = await bullMQService.queues.email.getWaiting();

    console.log(`üìã Metadata - Ho√†n th√†nh: ${metadataCompleted.length}, Ch·ªù: ${metadataWaiting.length}`);
    console.log(`üìß Email - Ho√†n th√†nh: ${emailCompleted.length}, Ch·ªù: ${emailWaiting.length}`);

    // Hi·ªÉn th·ªã k·∫øt qu·∫£ c·ªßa job ƒë·∫ßu ti√™n
    if (metadataCompleted.length > 0) {
      const job = metadataCompleted[0];
      console.log(`\n‚úÖ Metadata Job Result:`, job.returnvalue);
    }

    if (emailCompleted.length > 0) {
      const job = emailCompleted[0];
      console.log(`\n‚úÖ Email Job Result:`, job.returnvalue);
    }

    console.log('\nüéâ Workers test ho√†n t·∫•t!');
    
  } catch (error) {
    console.error('‚ùå Workers test th·∫•t b·∫°i:', error.message);
  } finally {
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c cleanup m·ªõi
    await bullMQService.cleanup();
  }
}

testWorkers();