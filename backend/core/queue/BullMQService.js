// backend/core/queue/BullMQService.js
const { Queue, Worker, QueueEvents } = require('bullmq');
const Redis = require('ioredis');

class BullMQService {
  constructor() {
    this.connection = null;
    this.queues = {};
    this.workers = {};
    this.isInitialized = false;
  }

  // Ph∆∞∆°ng th·ª©c initialize() ƒë·ªÉ kh·ªüi t·∫°o k·∫øt n·ªëi Redis v√† c√°c queue
    // Thay th·∫ø ph∆∞∆°ng th·ª©c initialize() hi·ªán t·∫°i
    async initialize() {
    console.log('üìã Kh·ªüi t·∫°o BullMQ Service...');
    
    try {
        // C·∫•u h√¨nh Redis cho BullMQ (kh√°c v·ªõi Redis th∆∞·ªùng)
        this.connection = new Redis({
        host: process.env.REDIS_HOST || 'localhost',
        port: process.env.REDIS_PORT || 6379,
        password: process.env.REDIS_PASSWORD,
        db: 1,
        maxRetriesPerRequest: null, // BullMQ y√™u c·∫ßu null
        retryDelayOnFailover: 100,
        enableReadyCheck: false,
        lazyConnect: true // K·∫øt n·ªëi lazy ƒë·ªÉ tr√°nh l·ªói
        });

        await this.connection.ping();
        console.log('‚úÖ K·∫øt n·ªëi BullMQ Redis th√†nh c√¥ng');

        // Kh·ªüi t·∫°o queues
        await this.initializeQueues();

        // Kh·ªüi t·∫°o workers  
        await this.initializeWorkers();

        this.isInitialized = true;
        console.log('‚úÖ BullMQ Service kh·ªüi t·∫°o ho√†n t·∫•t');
        
    } catch (error) {
        console.error('‚ùå Kh·ªüi t·∫°o BullMQ th·∫•t b·∫°i:', error);
        throw error;
    }
    }

  // Th√™m v√†o trong class BullMQService, sau ph∆∞∆°ng th·ª©c initialize()

    async initializeQueues() {
    const queueOptions = {
        connection: this.connection,
        defaultJobOptions: {
        removeOnComplete: 100, // Gi·ªØ 100 job ho√†n th√†nh
        removeOnFail: 50,      // Gi·ªØ 50 job th·∫•t b·∫°i
        attempts: 3,           // Th·ª≠ l·∫°i 3 l·∫ßn
        backoff: {
            type: 'exponential',
            delay: 2000,
        },
        },
    };

    // Kh·ªüi t·∫°o c√°c queue
    this.queues.metadata = new Queue('metadata-fetching', queueOptions);
    this.queues.email = new Queue('email-notifications', queueOptions);
    this.queues.analytics = new Queue('analytics-processing', queueOptions);
    this.queues.clickTracking = new Queue('click-tracking', queueOptions);

    console.log('‚úÖ C√°c queue ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
    }

    // Ph∆∞∆°ng th·ª©c th√™m job metadata
    async addMetadataJob(linkId, url, userId) {
    if (!this.isInitialized) {
        throw new Error('BullMQ Service ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }

    const job = await this.queues.metadata.add('fetch', {
        linkId,
        url,
        userId,
        timestamp: new Date()
    });

    console.log(`üìã Metadata job ƒë∆∞·ª£c th√™m: ${job.id} cho URL: ${url}`);
    return job.id;
    }

    // Ph∆∞∆°ng th·ª©c th√™m job email
    async addEmailJob(type, to, data) {
    if (!this.isInitialized) {
        throw new Error('BullMQ Service ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }

    const job = await this.queues.email.add(type, {
        type,
        to,
        data,
        timestamp: new Date()
    });

    console.log(`üìß Email job ƒë∆∞·ª£c th√™m: ${job.id} (${type} -> ${to})`);
    return job.id;
    }

        // Th√™m v√†o class BullMQService, sau ph∆∞∆°ng th·ª©c initializeQueues()

    async initializeWorkers() {
    const workerOptions = {
        connection: this.connection,
        concurrency: 5, // X·ª≠ l√Ω 5 job ƒë·ªìng th·ªùi
    };

    // Worker x·ª≠ l√Ω metadata
    this.workers.metadata = new Worker('metadata-fetching', async (job) => {
        return await this.processMetadataJob(job);
    }, workerOptions);

    // Worker x·ª≠ l√Ω email
    this.workers.email = new Worker('email-notifications', async (job) => {
        return await this.processEmailJob(job);
    }, workerOptions);

    // Worker x·ª≠ l√Ω analytics
    this.workers.analytics = new Worker('analytics-processing', async (job) => {
        return await this.processAnalyticsJob(job);
    }, workerOptions);

    // Worker x·ª≠ l√Ω click tracking
    this.workers.clickTracking = new Worker('click-tracking', async (job) => {
        return await this.processClickTrackingJob(job);
    }, { ...workerOptions, concurrency: 10 });

    console.log('‚úÖ T·∫•t c·∫£ Workers ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }

    // Job processor cho metadata
    async processMetadataJob(job) {
    const { linkId, url, userId } = job.data;
    console.log(`üîç ƒêang x·ª≠ l√Ω metadata cho: ${url}`);

    try {
        // Simulate metadata fetching
        await new Promise(resolve => setTimeout(resolve, 2000)); // Gi·∫£ l·∫≠p 2 gi√¢y

        // Gi·∫£ l·∫≠p k·∫øt qu·∫£ metadata
        const metadata = {
        title: `Title for ${url}`,
        description: `Description for ${url}`,
        image: `https://example.com/image.jpg`
        };

        console.log(`‚úÖ Metadata ho√†n th√†nh cho ${url}:`, metadata);
        
        // C·∫≠p nh·∫≠t progress
        job.updateProgress(100);

        return {
        success: true,
        linkId,
        metadata
        };

    } catch (error) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω metadata cho ${url}:`, error.message);
        throw error;
    }
    }

    // Job processor cho email
    async processEmailJob(job) {
    const { type, to, data } = job.data;
    console.log(`üìß ƒêang g·ª≠i email ${type} t·ªõi: ${to}`);

    try {
        // Simulate email sending
        await new Promise(resolve => setTimeout(resolve, 1000)); // Gi·∫£ l·∫≠p 1 gi√¢y

        console.log(`‚úÖ Email ${type} ƒë√£ g·ª≠i th√†nh c√¥ng t·ªõi ${to}`);
        
        job.updateProgress(100);

        return {
        success: true,
        type,
        to,
        messageId: `msg-${Date.now()}`
        };

    } catch (error) {
        console.error(`‚ùå L·ªói g·ª≠i email t·ªõi ${to}:`, error.message);
        throw error;
    }
    }

    // Job processor cho analytics
    async processAnalyticsJob(job) {
    const { type, data } = job.data;
    console.log(`üìà ƒêang x·ª≠ l√Ω analytics: ${type}`);

    try {
        // Simulate analytics processing
        await new Promise(resolve => setTimeout(resolve, 1500));

        console.log(`‚úÖ Analytics ${type} ƒë√£ x·ª≠ l√Ω xong`);
        
        job.updateProgress(100);

        return {
        success: true,
        type,
        processed: true
        };

    } catch (error) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω analytics:`, error.message);
        throw error;
    }
    }

    // Job processor cho click tracking
    async processClickTrackingJob(job) {
    const { clicks } = job.data;
    console.log(`üìä ƒêang x·ª≠ l√Ω ${clicks?.length || 1} click events`);

    try {
        // Simulate click processing
        await new Promise(resolve => setTimeout(resolve, 500));

        console.log(`‚úÖ Click tracking ho√†n th√†nh`);
        
        job.updateProgress(100);

        return {
        success: true,
        processed: clicks?.length || 1
        };

    } catch (error) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω click tracking:`, error.message);
        throw error;
    }
    }

    // Th√™m ph∆∞∆°ng th·ª©c cleanup 
    async cleanup() {
    console.log('üßπ D·ªçn d·∫πp BullMQ Service...');

    try {
        // ƒê√≥ng t·∫•t c·∫£ workers
        for (const worker of Object.values(this.workers)) {
        await worker.close();
        }

        // ƒê√≥ng t·∫•t c·∫£ queues
        for (const queue of Object.values(this.queues)) {
        await queue.close();
        }

        // ƒê√≥ng k·∫øt n·ªëi Redis
        if (this.connection) {
        await this.connection.quit();
        }

        console.log('‚úÖ BullMQ cleanup ho√†n t·∫•t');
        
    } catch (error) {
        console.error('‚ùå L·ªói cleanup:', error);
    }
    }
}

module.exports = new BullMQService();